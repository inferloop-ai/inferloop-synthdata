"""\nSecurity tests for HIPAA compliance.\n\nTests security controls and safeguards required for protecting\nProtected Health Information (PHI) under HIPAA regulations.\n"""\n\nimport pytest\nfrom datetime import datetime, timedelta\nfrom unittest.mock import Mock, AsyncMock, patch\nimport hashlib\nimport json\n\nfrom structured_docs_synth.privacy.compliance.hipaa_enforcer import (\n    HIPAAEnforcer,\n    HIPAAConfig,\n    PHIType,\n    AccessControl,\n    AuditLog,\n    EncryptionStandard,\n    SafeguardType\n)\nfrom structured_docs_synth.core.exceptions import ComplianceError, SecurityError\n\n\nclass TestHIPAAAccessControls:\n    """Test HIPAA access control requirements."""\n    \n    @pytest.fixture\n    def hipaa_enforcer(self):\n        """Provide HIPAA enforcer instance."""\n        return HIPAAEnforcer()\n    \n    def test_unique_user_identification(self, hipaa_enforcer):\n        """Test unique user identification requirement."""\n        # Register users\n        user1 = hipaa_enforcer.register_user(\n            user_id='doc123',\n            role='physician',\n            department='cardiology'\n        )\n        \n        user2 = hipaa_enforcer.register_user(\n            user_id='nurse456',\n            role='nurse',\n            department='cardiology'\n        )\n        \n        assert user1.user_id != user2.user_id\n        assert user1.has_unique_identifier()\n        assert user2.has_unique_identifier()\n        \n        # Test duplicate user ID prevention\n        with pytest.raises(SecurityError, match="User ID already exists"):\n            hipaa_enforcer.register_user('doc123', 'physician', 'emergency')\n    \n    def test_automatic_logoff(self, hipaa_enforcer):\n        """Test automatic logoff implementation."""\n        session = hipaa_enforcer.create_session(\n            user_id='doc123',\n            workstation_id='WS001'\n        )\n        \n        # Set timeout to 15 minutes\n        hipaa_enforcer.config.session_timeout_minutes = 15\n        \n        # Simulate inactivity\n        session.last_activity = datetime.now() - timedelta(minutes=20)\n        \n        assert session.is_expired()\n        \n        # Verify session termination\n        result = hipaa_enforcer.check_session_validity(session.session_id)\n        assert result['valid'] is False\n        assert result['reason'] == 'session_timeout'\n    \n    def test_encryption_and_decryption(self, hipaa_enforcer):\n        """Test PHI encryption requirements."""\n        phi_data = {\n            'patient_name': 'John Doe',\n            'ssn': '123-45-6789',\n            'diagnosis': 'Hypertension',\n            'mrn': 'MRN123456'\n        }\n        \n        # Encrypt PHI\n        encrypted = hipaa_enforcer.encrypt_phi(\n            data=phi_data,\n            encryption_standard=EncryptionStandard.AES_256\n        )\n        \n        assert encrypted['encrypted'] is True\n        assert encrypted['algorithm'] == 'AES-256'\n        assert encrypted['data'] != phi_data\n        assert 'encryption_key_id' in encrypted\n        \n        # Verify decryption with proper authorization\n        decrypted = hipaa_enforcer.decrypt_phi(\n            encrypted_data=encrypted['data'],\n            key_id=encrypted['encryption_key_id'],\n            user_id='doc123',\n            purpose='treatment'\n        )\n        \n        assert decrypted['success'] is True\n        assert decrypted['data'] == phi_data\n    \n    def test_access_authorization(self, hipaa_enforcer):\n        """Test PHI access authorization."""\n        # Setup access control\n        hipaa_enforcer.setup_access_control(\n            resource='patient_records',\n            allowed_roles=['physician', 'nurse'],\n            minimum_necessity=True\n        )\n        \n        # Test authorized access\n        auth_result = hipaa_enforcer.authorize_access(\n            user_id='doc123',\n            user_role='physician',\n            resource='patient_records',\n            action='read',\n            patient_id='PAT001'\n        )\n        \n        assert auth_result['authorized'] is True\n        assert auth_result['basis'] == 'role_based_access'\n        \n        # Test unauthorized access\n        with pytest.raises(SecurityError, match="Unauthorized access"):\n            hipaa_enforcer.authorize_access(\n                user_id='admin789',\n                user_role='administrator',\n                resource='patient_records',\n                action='read',\n                patient_id='PAT001'\n            )\n    \n    def test_audit_controls(self, hipaa_enforcer):\n        """Test HIPAA audit control requirements."""\n        # Enable audit logging\n        hipaa_enforcer.enable_audit_logging(\n            log_level='detailed',\n            retention_days=2555  # 7 years\n        )\n        \n        # Perform auditable action\n        access_event = hipaa_enforcer.log_phi_access(\n            user_id='doc123',\n            patient_id='PAT001',\n            action='view',\n            phi_accessed=['demographics', 'diagnosis'],\n            workstation_id='WS001',\n            access_time=datetime.now()\n        )\n        \n        # Verify audit log\n        assert access_event.event_id is not None\n        assert access_event.user_id == 'doc123'\n        assert access_event.tamper_proof is True\n        \n        # Test audit log integrity\n        integrity_check = hipaa_enforcer.verify_audit_integrity(\n            start_date=datetime.now() - timedelta(days=1),\n            end_date=datetime.now()\n        )\n        \n        assert integrity_check['valid'] is True\n        assert integrity_check['tampering_detected'] is False\n\n\nclass TestHIPAAPhysicalSafeguards:\n    """Test HIPAA physical safeguard requirements."""\n    \n    @pytest.fixture\n    def hipaa_enforcer(self):\n        """Provide HIPAA enforcer with physical safeguards."""\n        enforcer = HIPAAEnforcer()\n        enforcer.enable_physical_safeguards()\n        return enforcer\n    \n    def test_workstation_security(self, hipaa_enforcer):\n        """Test workstation security controls."""\n        # Register workstation\n        workstation = hipaa_enforcer.register_workstation(\n            workstation_id='WS001',\n            location='3rd Floor Nursing Station',\n            type='desktop',\n            security_features=['screen_lock', 'encryption', 'antivirus']\n        )\n        \n        assert workstation.is_compliant()\n        assert 'encryption' in workstation.security_features\n        \n        # Test workstation access logging\n        access_log = hipaa_enforcer.log_workstation_access(\n            workstation_id='WS001',\n            user_id='nurse456',\n            action='login'\n        )\n        \n        assert access_log['logged'] is True\n        assert access_log['workstation_compliant'] is True\n    \n    def test_device_and_media_controls(self, hipaa_enforcer):\n        """Test device and media control requirements."""\n        # Register removable media\n        media = hipaa_enforcer.register_media(\n            media_id='USB001',\n            media_type='usb_drive',\n            encryption_enabled=True,\n            capacity_gb=32\n        )\n        \n        # Test media usage tracking\n        usage = hipaa_enforcer.track_media_usage(\n            media_id='USB001',\n            user_id='doc123',\n            action='copy_phi',\n            phi_records=['PAT001', 'PAT002']\n        )\n        \n        assert usage['tracked'] is True\n        assert usage['requires_authorization'] is True\n        \n        # Test media disposal\n        disposal = hipaa_enforcer.dispose_media(\n            media_id='USB001',\n            method='secure_wipe',\n            verification='dod_5220'\n        )\n        \n        assert disposal['success'] is True\n        assert disposal['certificate_generated'] is True\n\n\nclass TestHIPAATechnicalSafeguards:\n    """Test HIPAA technical safeguard requirements."""\n    \n    @pytest.fixture\n    def hipaa_enforcer(self):\n        """Provide HIPAA enforcer with technical safeguards."""\n        return HIPAAEnforcer()\n    \n    def test_access_control_implementation(self, hipaa_enforcer):\n        """Test technical access control implementation."""\n        # Setup role-based access\n        hipaa_enforcer.configure_rbac(\n            roles={\n                'physician': ['read_phi', 'write_phi', 'prescribe'],\n                'nurse': ['read_phi', 'update_vitals'],\n                'billing': ['read_demographics', 'read_insurance']\n            }\n        )\n        \n        # Test permission checking\n        perms = hipaa_enforcer.get_user_permissions('doc123', 'physician')\n        assert 'read_phi' in perms\n        assert 'prescribe' in perms\n        assert 'delete_phi' not in perms\n    \n    def test_transmission_security(self, hipaa_enforcer):\n        """Test PHI transmission security."""\n        phi_data = {'patient_id': 'PAT001', 'diagnosis': 'Diabetes'}\n        \n        # Test secure transmission\n        transmission = hipaa_enforcer.prepare_secure_transmission(\n            data=phi_data,\n            recipient='external_lab',\n            method='https',\n            encryption='TLS_1_3'\n        )\n        \n        assert transmission['encrypted'] is True\n        assert transmission['protocol'] == 'TLS_1_3'\n        assert transmission['integrity_check'] is not None\n        \n        # Verify end-to-end encryption\n        e2e_check = hipaa_enforcer.verify_e2e_encryption(\n            transmission_id=transmission['id']\n        )\n        \n        assert e2e_check['verified'] is True\n        assert e2e_check['encryption_maintained'] is True\n    \n    def test_integrity_controls(self, hipaa_enforcer):\n        """Test data integrity controls."""\n        phi_record = {\n            'patient_id': 'PAT001',\n            'lab_results': {'glucose': 120, 'hba1c': 6.5}\n        }\n        \n        # Create integrity hash\n        integrity = hipaa_enforcer.create_integrity_hash(phi_record)\n        \n        assert 'hash' in integrity\n        assert 'algorithm' in integrity\n        assert integrity['algorithm'] == 'SHA-256'\n        \n        # Test integrity verification\n        verification = hipaa_enforcer.verify_integrity(\n            data=phi_record,\n            original_hash=integrity['hash']\n        )\n        \n        assert verification['intact'] is True\n        \n        # Test tampered data detection\n        tampered_record = phi_record.copy()\n        tampered_record['lab_results']['glucose'] = 150\n        \n        tamper_check = hipaa_enforcer.verify_integrity(\n            data=tampered_record,\n            original_hash=integrity['hash']\n        )\n        \n        assert tamper_check['intact'] is False\n        assert tamper_check['tampering_detected'] is True\n    \n    @pytest.mark.asyncio\n    async def test_person_authentication(self, hipaa_enforcer):\n        """Test person or entity authentication."""\n        # Setup multi-factor authentication\n        mfa_config = hipaa_enforcer.configure_mfa(\n            methods=['password', 'token', 'biometric'],\n            required_factors=2\n        )\n        \n        # Test authentication\n        auth_result = await hipaa_enforcer.authenticate_user(\n            user_id='doc123',\n            password='hashed_password',\n            token='123456',\n            ip_address='192.168.1.100'\n        )\n        \n        assert auth_result['authenticated'] is True\n        assert auth_result['factors_used'] == 2\n        assert 'session_token' in auth_result\n        \n        # Test failed authentication logging\n        failed_auth = await hipaa_enforcer.authenticate_user(\n            user_id='doc123',\n            password='wrong_password',\n            token='000000'\n        )\n        \n        assert failed_auth['authenticated'] is False\n        assert failed_auth['logged'] is True\n        assert failed_auth['alert_triggered'] is True\n\n\nclass TestHIPAABreachNotification:\n    """Test HIPAA breach notification requirements."""\n    \n    @pytest.fixture\n    def hipaa_enforcer(self):\n        """Provide HIPAA enforcer instance."""\n        return HIPAAEnforcer()\n    \n    def test_breach_risk_assessment(self, hipaa_enforcer):\n        """Test breach risk assessment process."""\n        breach_details = {\n            'type': 'unauthorized_access',\n            'phi_involved': ['names', 'ssn', 'diagnosis'],\n            'records_affected': 150,\n            'encryption_status': 'unencrypted',\n            'discovered_date': datetime.now()\n        }\n        \n        risk_assessment = hipaa_enforcer.assess_breach_risk(breach_details)\n        \n        assert risk_assessment['risk_level'] == 'high'\n        assert risk_assessment['notification_required'] is True\n        assert risk_assessment['factors']['encryption'] == 'unencrypted'\n        assert risk_assessment['factors']['phi_sensitivity'] == 'high'\n    \n    def test_breach_notification_timeline(self, hipaa_enforcer):\n        """Test breach notification timeline compliance."""\n        breach = hipaa_enforcer.report_breach(\n            incident_date=datetime.now() - timedelta(days=10),\n            discovery_date=datetime.now() - timedelta(days=5),\n            affected_individuals=500,\n            phi_types=['demographics', 'medical_history']\n        )\n        \n        timeline = hipaa_enforcer.calculate_notification_timeline(breach)\n        \n        assert timeline['individual_notification_deadline'] is not None\n        assert timeline['hhs_notification_deadline'] is not None\n        assert timeline['media_notification_required'] is True  # >500 individuals\n        assert timeline['days_remaining'] > 0\n    \n    def test_breach_documentation(self, hipaa_enforcer):\n        """Test breach documentation requirements."""\n        breach_doc = hipaa_enforcer.document_breach(\n            incident_id='BREACH001',\n            description='Laptop containing PHI stolen from employee vehicle',\n            mitigation_actions=[\n                'Remote wipe attempted',\n                'Password reset for affected accounts',\n                'Credit monitoring offered'\n            ],\n            individuals_notified=True,\n            law_enforcement_delay=False\n        )\n        \n        assert breach_doc['documented'] is True\n        assert breach_doc['retention_period_years'] == 6\n        assert len(breach_doc['required_elements']) > 0\n        assert all(elem in breach_doc for elem in [\n            'date_of_breach',\n            'date_of_discovery',\n            'description',\n            'phi_involved',\n            'mitigation_steps'\n        ])\n\n\nclass TestHIPAAMinimumNecessary:\n    """Test HIPAA minimum necessary standard."""\n    \n    @pytest.fixture\n    def hipaa_enforcer(self):\n        """Provide HIPAA enforcer instance."""\n        return HIPAAEnforcer()\n    \n    def test_minimum_necessary_implementation(self, hipaa_enforcer):\n        """Test minimum necessary access implementation."""\n        # Define role-based data access\n        hipaa_enforcer.define_minimum_necessary(\n            role='billing_clerk',\n            allowed_phi_elements=['patient_name', 'insurance_info', 'procedure_codes'],\n            prohibited_elements=['diagnosis_details', 'clinical_notes']\n        )\n        \n        # Test data filtering\n        full_record = {\n            'patient_name': 'John Doe',\n            'insurance_info': 'BCBS-12345',\n            'procedure_codes': ['99213'],\n            'diagnosis_details': 'Detailed clinical diagnosis',\n            'clinical_notes': 'Patient presents with...'\n        }\n        \n        filtered = hipaa_enforcer.apply_minimum_necessary(\n            data=full_record,\n            user_role='billing_clerk'\n        )\n        \n        assert 'patient_name' in filtered\n        assert 'insurance_info' in filtered\n        assert 'diagnosis_details' not in filtered\n        assert 'clinical_notes' not in filtered\n    \n    def test_exception_handling(self, hipaa_enforcer):\n        """Test minimum necessary exceptions."""\n        # Test treatment exception\n        treatment_access = hipaa_enforcer.check_minimum_necessary_exception(\n            purpose='treatment',\n            user_role='physician',\n            patient_consent=True\n        )\n        \n        assert treatment_access['exception_applies'] is True\n        assert treatment_access['reason'] == 'treatment_exception'\n        \n        # Test required by law exception\n        legal_access = hipaa_enforcer.check_minimum_necessary_exception(\n            purpose='court_order',\n            legal_request_id='COURT-001',\n            validated=True\n        )\n        \n        assert legal_access['exception_applies'] is True\n        assert legal_access['documentation_required'] is True