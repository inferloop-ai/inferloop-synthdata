"""\nSetup configuration for Structured Documents Synthetic Data Generation System.\n\nThis package provides comprehensive synthetic document generation capabilities\nfor various business domains with privacy compliance and quality assurance.\n"""\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom setuptools import setup, find_packages\n\n# Package metadata\nNAME = 'structured-docs-synth'\nVERSION = '1.0.0'\nDESCRIPTION = 'AI-powered synthetic document generation system with privacy compliance'\nURL = 'https://github.com/inferloop/structured-docs-synth'\nEMAIL = 'support@inferloop.com'\nAUTHOR = 'InferLoop AI'\nREQUIRES_PYTHON = '>=3.8.0'\nLICENSE = 'MIT'\n\n# Required packages\nREQUIRED = [\n    # Core dependencies\n    'numpy>=1.21.0',\n    'pandas>=1.3.0',\n    'faker>=15.0.0',\n    'pydantic>=2.0.0',\n    'python-dotenv>=0.19.0',\n    'pyyaml>=6.0',\n    'click>=8.0.0',\n    'rich>=12.0.0',\n    \n    # Document generation\n    'reportlab>=3.6.0',\n    'python-docx>=0.8.11',\n    'pillow>=9.0.0',\n    'pypdf>=3.0.0',\n    'pdfplumber>=0.7.0',\n    'jinja2>=3.0.0',\n    \n    # OCR and image processing\n    'pytesseract>=0.3.10',\n    'opencv-python>=4.7.0',\n    'pdf2image>=1.16.0',\n    \n    # NLP and text processing\n    'spacy>=3.4.0',\n    'transformers>=4.25.0',\n    'sentence-transformers>=2.2.0',\n    'nltk>=3.8',\n    \n    # Privacy and security\n    'cryptography>=39.0.0',\n    'pycryptodome>=3.17.0',\n    \n    # API and web\n    'fastapi>=0.95.0',\n    'uvicorn>=0.20.0',\n    'httpx>=0.23.0',\n    'websockets>=10.4',\n    'pydantic>=2.0.0',\n    \n    # Cloud storage\n    'boto3>=1.26.0',\n    'azure-storage-blob>=12.14.0',\n    'google-cloud-storage>=2.7.0',\n    \n    # Database\n    'sqlalchemy>=2.0.0',\n    'alembic>=1.9.0',\n    'redis>=4.5.0',\n    'motor>=3.1.0',  # MongoDB async\n    \n    # Monitoring and logging\n    'prometheus-client>=0.16.0',\n    'python-json-logger>=2.0.0',\n    'sentry-sdk>=1.14.0',\n    \n    # Testing (included in main deps for development)\n    'pytest>=7.2.0',\n    'pytest-asyncio>=0.20.0',\n    'pytest-cov>=4.0.0',\n    'pytest-mock>=3.10.0',\n]\n\n# Optional dependencies\nEXTRAS = {\n    'dev': [\n        'black>=23.0.0',\n        'isort>=5.12.0',\n        'flake8>=6.0.0',\n        'mypy>=1.0.0',\n        'pre-commit>=3.0.0',\n        'jupyter>=1.0.0',\n        'ipython>=8.10.0',\n    ],\n    'ml': [\n        'torch>=2.0.0',\n        'tensorflow>=2.11.0',\n        'scikit-learn>=1.2.0',\n        'lightgbm>=3.3.0',\n        'xgboost>=1.7.0',\n    ],\n    'visualization': [\n        'matplotlib>=3.6.0',\n        'seaborn>=0.12.0',\n        'plotly>=5.13.0',\n        'dash>=2.8.0',\n    ],\n    'deployment': [\n        'docker>=6.0.0',\n        'kubernetes>=25.0.0',\n        'helm>=0.2.0',\n        'terraform>=1.3.0',\n    ],\n}\n\n# Load README for long description\nhere = Path(__file__).parent.resolve()\nlong_description = ''\ntry:\n    with open(here / 'README.md', encoding='utf-8') as f:\n        long_description = f.read()\nexcept FileNotFoundError:\n    long_description = DESCRIPTION\n\n# Package data\npackage_data = {\n    'structured_docs_synth': [\n        'configs/*.yaml',\n        'configs/*.json',\n        'templates/**/*',\n        'resources/**/*',\n        'static/**/*',\n    ],\n}\n\n# Entry points for CLI\nentry_points = {\n    'console_scripts': [\n        'synth-docs=structured_docs_synth.cli.main:cli',\n        'synth-api=structured_docs_synth.delivery.api.rest_api:run_server',\n    ],\n}\n\n# Setup configuration\nsetup(\n    name=NAME,\n    version=VERSION,\n    description=DESCRIPTION,\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    author=AUTHOR,\n    author_email=EMAIL,\n    python_requires=REQUIRES_PYTHON,\n    url=URL,\n    packages=find_packages(exclude=['tests', 'tests.*', 'notebooks', 'docs']),\n    package_data=package_data,\n    include_package_data=True,\n    install_requires=REQUIRED,\n    extras_require=EXTRAS,\n    entry_points=entry_points,\n    license=LICENSE,\n    classifiers=[\n        # Trove classifiers\n        'Development Status :: 4 - Beta',\n        'Intended Audience :: Developers',\n        'Intended Audience :: Science/Research',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.8',\n        'Programming Language :: Python :: 3.9',\n        'Programming Language :: Python :: 3.10',\n        'Programming Language :: Python :: 3.11',\n        'Topic :: Scientific/Engineering :: Artificial Intelligence',\n        'Topic :: Software Development :: Libraries :: Python Modules',\n        'Topic :: Text Processing :: General',\n        'Topic :: Office/Business',\n    ],\n    keywords='synthetic-data document-generation privacy-compliance nlp ocr',\n    project_urls={\n        'Bug Reports': f'{URL}/issues',\n        'Documentation': f'{URL}/wiki',\n        'Source': URL,\n    },\n    # Additional metadata\n    zip_safe=False,\n    platforms=['any'],\n)\n\n# Post-installation tasks\nif 'install' in sys.argv:\n    print("\\n" + "=" * 60)\n    print("Structured Documents Synthetic Data Generation System")\n    print("=" * 60)\n    print(f"Version: {VERSION}")\n    print(f"\\nInstallation complete! Run 'synth-docs --help' to get started.")\n    print("\\nAdditional setup steps:")\n    print("1. Download spaCy language models: python -m spacy download en_core_web_sm")\n    print("2. Install Tesseract OCR: See https://github.com/tesseract-ocr/tesseract")\n    print("3. Configure cloud credentials if using cloud storage")\n    print("=" * 60 + "\\n")