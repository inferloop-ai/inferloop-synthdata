"""\nPrometheus exporter for compliance metrics.\n\nTracks and exposes metrics related to privacy compliance, data protection,\nand regulatory adherence for GDPR, HIPAA, PCI-DSS, and other frameworks.\n"""\n\nimport asyncio\nimport logging\nfrom datetime import datetime, timedelta\nfrom typing import Dict, List, Any, Optional\nfrom enum import Enum\n\nfrom prometheus_client import (\n    Counter, Gauge, Histogram, Summary,\n    start_http_server, CollectorRegistry,\n    CONTENT_TYPE_LATEST\n)\nfrom prometheus_client.core import GaugeMetricFamily, CounterMetricFamily\n\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\nclass ComplianceFramework(Enum):\n    """Supported compliance frameworks."""\n    GDPR = "gdpr"\n    HIPAA = "hipaa"\n    PCI_DSS = "pci_dss"\n    SOX = "sox"\n    ISO_27001 = "iso_27001"\n    CCPA = "ccpa"\n\n\nclass DataCategory(Enum):\n    """Data categories for compliance tracking."""\n    PERSONAL = "personal"\n    SENSITIVE = "sensitive"\n    HEALTH = "health"\n    FINANCIAL = "financial"\n    BIOMETRIC = "biometric"\n\n\n# Metric definitions\nconsent_records = Counter(\n    'compliance_consent_records_total',\n    'Total number of consent records',\n    ['framework', 'purpose', 'status']  # status: granted, withdrawn, expired\n)\n\ndata_processing_activities = Counter(\n    'compliance_data_processing_total',\n    'Total data processing activities',\n    ['framework', 'category', 'lawful_basis']\n)\n\ndata_subject_requests = Counter(\n    'compliance_data_subject_requests_total',\n    'Total data subject requests',\n    ['framework', 'request_type', 'status']  # request_type: access, erasure, portability\n)\n\naudit_events = Counter(\n    'compliance_audit_events_total',\n    'Total compliance audit events',\n    ['framework', 'event_type', 'severity']\n)\n\ndata_retention_gauge = Gauge(\n    'compliance_data_retention_days',\n    'Current data retention period in days',\n    ['framework', 'data_category']\n)\n\nencryption_status = Gauge(\n    'compliance_encryption_status',\n    'Encryption status (1=enabled, 0=disabled)',\n    ['framework', 'encryption_type', 'location']  # location: at_rest, in_transit\n)\n\naccess_control_violations = Counter(\n    'compliance_access_violations_total',\n    'Total access control violations',\n    ['framework', 'resource_type', 'violation_type']\n)\n\npii_detection_counter = Counter(\n    'compliance_pii_detections_total',\n    'Total PII detections',\n    ['framework', 'pii_type', 'action_taken']  # action: masked, encrypted, blocked\n)\n\nbreach_incidents = Counter(\n    'compliance_breach_incidents_total',\n    'Total data breach incidents',\n    ['framework', 'severity', 'data_type']\n)\n\ncompliance_score = Gauge(\n    'compliance_score_percent',\n    'Overall compliance score percentage',\n    ['framework']\n)\n\ndata_minimization_gauge = Gauge(\n    'compliance_data_minimization_fields',\n    'Number of data fields collected vs required',\n    ['framework', 'metric_type']  # metric_type: collected, required\n)\n\naudit_log_retention = Gauge(\n    'compliance_audit_log_retention_days',\n    'Audit log retention period in days',\n    ['framework']\n)\n\nresponse_time_histogram = Histogram(\n    'compliance_request_response_time_seconds',\n    'Time to respond to compliance requests',\n    ['framework', 'request_type'],\n    buckets=(0.5, 1.0, 5.0, 10.0, 30.0, 60.0, 300.0, 600.0, 3600.0)\n)\n\n\nclass ComplianceMetricsCollector:\n    """Collector for compliance-specific metrics."""\n    \n    def __init__(self):\n        self.compliance_state = {}\n        self.start_time = datetime.now()\n        self._initialize_frameworks()\n    \n    def _initialize_frameworks(self):\n        """Initialize compliance framework tracking."""\n        for framework in ComplianceFramework:\n            self.compliance_state[framework.value] = {\n                'score': 0.0,\n                'last_audit': None,\n                'violations': [],\n                'active_consents': 0,\n                'data_categories': set(),\n                'retention_policies': {},\n                'encryption_status': {\n                    'at_rest': True,\n                    'in_transit': True\n                }\n            }\n    \n    def record_consent(self, framework: str, purpose: str, status: str):\n        """Record consent activity."""\n        consent_records.labels(\n            framework=framework,\n            purpose=purpose,\n            status=status\n        ).inc()\n        \n        if status == 'granted':\n            self.compliance_state[framework]['active_consents'] += 1\n        elif status == 'withdrawn':\n            self.compliance_state[framework]['active_consents'] = max(0, \n                self.compliance_state[framework]['active_consents'] - 1)\n    \n    def record_data_processing(self, framework: str, category: str, lawful_basis: str):\n        """Record data processing activity."""\n        data_processing_activities.labels(\n            framework=framework,\n            category=category,\n            lawful_basis=lawful_basis\n        ).inc()\n        \n        self.compliance_state[framework]['data_categories'].add(category)\n    \n    def record_subject_request(self, framework: str, request_type: str, \n                             status: str, response_time: float = None):\n        """Record data subject request."""\n        data_subject_requests.labels(\n            framework=framework,\n            request_type=request_type,\n            status=status\n        ).inc()\n        \n        if response_time:\n            response_time_histogram.labels(\n                framework=framework,\n                request_type=request_type\n            ).observe(response_time)\n    \n    def record_audit_event(self, framework: str, event_type: str, severity: str):\n        """Record audit event."""\n        audit_events.labels(\n            framework=framework,\n            event_type=event_type,\n            severity=severity\n        ).inc()\n        \n        self.compliance_state[framework]['last_audit'] = datetime.now()\n    \n    def update_retention_policy(self, framework: str, data_category: str, days: int):\n        """Update data retention policy."""\n        data_retention_gauge.labels(\n            framework=framework,\n            data_category=data_category\n        ).set(days)\n        \n        if framework in self.compliance_state:\n            self.compliance_state[framework]['retention_policies'][data_category] = days\n    \n    def update_encryption_status(self, framework: str, encryption_type: str, \n                               location: str, enabled: bool):\n        """Update encryption status."""\n        encryption_status.labels(\n            framework=framework,\n            encryption_type=encryption_type,\n            location=location\n        ).set(1 if enabled else 0)\n        \n        if framework in self.compliance_state:\n            self.compliance_state[framework]['encryption_status'][location] = enabled\n    \n    def record_access_violation(self, framework: str, resource_type: str, \n                              violation_type: str):\n        """Record access control violation."""\n        access_control_violations.labels(\n            framework=framework,\n            resource_type=resource_type,\n            violation_type=violation_type\n        ).inc()\n        \n        self.compliance_state[framework]['violations'].append({\n            'type': violation_type,\n            'resource': resource_type,\n            'timestamp': datetime.now()\n        })\n    \n    def record_pii_detection(self, framework: str, pii_type: str, action_taken: str):\n        """Record PII detection event."""\n        pii_detection_counter.labels(\n            framework=framework,\n            pii_type=pii_type,\n            action_taken=action_taken\n        ).inc()\n    \n    def record_breach_incident(self, framework: str, severity: str, data_type: str):\n        """Record data breach incident."""\n        breach_incidents.labels(\n            framework=framework,\n            severity=severity,\n            data_type=data_type\n        ).inc()\n    \n    def update_compliance_score(self, framework: str, score: float):\n        """Update overall compliance score."""\n        compliance_score.labels(framework=framework).set(score)\n        self.compliance_state[framework]['score'] = score\n    \n    def update_data_minimization(self, framework: str, collected_fields: int, \n                               required_fields: int):\n        """Update data minimization metrics."""\n        data_minimization_gauge.labels(\n            framework=framework,\n            metric_type='collected'\n        ).set(collected_fields)\n        \n        data_minimization_gauge.labels(\n            framework=framework,\n            metric_type='required'\n        ).set(required_fields)\n    \n    def update_audit_retention(self, framework: str, days: int):\n        """Update audit log retention period."""\n        audit_log_retention.labels(framework=framework).set(days)\n    \n    def calculate_compliance_scores(self):\n        """Calculate and update compliance scores for all frameworks."""\n        for framework in ComplianceFramework:\n            score = self._calculate_framework_score(framework.value)\n            self.update_compliance_score(framework.value, score)\n    \n    def _calculate_framework_score(self, framework: str) -> float:\n        """Calculate compliance score for a specific framework."""\n        state = self.compliance_state[framework]\n        score_components = []\n        \n        # Encryption compliance (30%)\n        encryption_score = 100.0\n        if not state['encryption_status']['at_rest']:\n            encryption_score -= 50\n        if not state['encryption_status']['in_transit']:\n            encryption_score -= 50\n        score_components.append(encryption_score * 0.3)\n        \n        # Access control compliance (25%)\n        recent_violations = [v for v in state['violations'] \n                           if (datetime.now() - v['timestamp']).days < 30]\n        violation_penalty = min(len(recent_violations) * 5, 100)\n        access_score = max(0, 100 - violation_penalty)\n        score_components.append(access_score * 0.25)\n        \n        # Audit compliance (20%)\n        if state['last_audit']:\n            days_since_audit = (datetime.now() - state['last_audit']).days\n            audit_score = max(0, 100 - (days_since_audit * 2))\n        else:\n            audit_score = 0\n        score_components.append(audit_score * 0.2)\n        \n        # Data retention compliance (15%)\n        if state['retention_policies']:\n            retention_score = 100\n        else:\n            retention_score = 50\n        score_components.append(retention_score * 0.15)\n        \n        # Consent management (10%)\n        if state['active_consents'] > 0:\n            consent_score = 100\n        else:\n            consent_score = 75  # May have legitimate interest\n        score_components.append(consent_score * 0.1)\n        \n        return sum(score_components)\n    \n    def collect(self):\n        """Collect custom metrics."""\n        # Calculate current compliance scores\n        self.calculate_compliance_scores()\n        \n        # Framework-specific health metrics\n        for framework, state in self.compliance_state.items():\n            # Time since last audit\n            if state['last_audit']:\n                days_since_audit = (datetime.now() - state['last_audit']).days\n                yield GaugeMetricFamily(\n                    'compliance_days_since_audit',\n                    'Days since last compliance audit',\n                    value=days_since_audit,\n                    labels=['framework']\n                )\n            \n            # Active consents ratio\n            yield GaugeMetricFamily(\n                'compliance_active_consents_count',\n                'Number of active consents',\n                value=state['active_consents'],\n                labels=['framework']\n            )\n            \n            # Recent violations count\n            recent_violations = len([v for v in state['violations'] \n                                   if (datetime.now() - v['timestamp']).days < 7])\n            yield GaugeMetricFamily(\n                'compliance_recent_violations_7d',\n                'Violations in last 7 days',\n                value=recent_violations,\n                labels=['framework']\n            )\n\n\nclass ComplianceMetricsExporter:\n    """Main exporter for compliance metrics."""\n    \n    def __init__(self, port: int = 9091):\n        self.port = port\n        self.collector = ComplianceMetricsCollector()\n        self.registry = CollectorRegistry()\n        self.registry.register(self.collector)\n        self.running = False\n    \n    async def start(self):\n        """Start the metrics exporter."""\n        try:\n            # Start HTTP server\n            start_http_server(self.port, registry=self.registry)\n            logger.info(f"Compliance Metrics Exporter started on port {self.port}")\n            \n            self.running = True\n            \n            # Start background tasks\n            await asyncio.gather(\n                self._periodic_compliance_check(),\n                self._simulate_compliance_events()  # Remove in production\n            )\n            \n        except Exception as e:\n            logger.error(f"Failed to start exporter: {e}")\n            raise\n    \n    async def _periodic_compliance_check(self):\n        """Periodically check and update compliance status."""\n        while self.running:\n            try:\n                # Update compliance scores\n                self.collector.calculate_compliance_scores()\n                \n                # Check for expired consents\n                # Check for overdue audits\n                # Check retention policy compliance\n                \n            except Exception as e:\n                logger.error(f"Error in compliance check: {e}")\n            \n            await asyncio.sleep(300)  # Check every 5 minutes\n    \n    async def _simulate_compliance_events(self):\n        """Simulate compliance events for testing."""\n        frameworks = ['gdpr', 'hipaa', 'pci_dss']\n        \n        while self.running:\n            try:\n                import random\n                \n                framework = random.choice(frameworks)\n                \n                # Simulate various compliance events\n                if random.random() > 0.7:\n                    self.collector.record_consent(\n                        framework,\n                        random.choice(['marketing', 'analytics', 'necessary']),\n                        random.choice(['granted', 'withdrawn', 'expired'])\n                    )\n                \n                if random.random() > 0.8:\n                    self.collector.record_data_processing(\n                        framework,\n                        random.choice(['personal', 'sensitive', 'health']),\n                        random.choice(['consent', 'legitimate_interest', 'contract'])\n                    )\n                \n                if random.random() > 0.9:\n                    self.collector.record_subject_request(\n                        framework,\n                        random.choice(['access', 'erasure', 'portability']),\n                        'completed',\n                        random.uniform(60, 3600)  # 1 minute to 1 hour\n                    )\n                \n                if random.random() > 0.95:\n                    self.collector.record_access_violation(\n                        framework,\n                        random.choice(['patient_records', 'financial_data', 'personal_info']),\n                        random.choice(['unauthorized_access', 'privilege_escalation', 'data_leak'])\n                    )\n                \n            except Exception as e:\n                logger.error(f"Error in simulation: {e}")\n            \n            await asyncio.sleep(10)\n    \n    def stop(self):\n        """Stop the exporter."""\n        self.running = False\n        logger.info("Compliance Metrics Exporter stopped")\n\n\n# Example usage\nif __name__ == "__main__":\n    async def main():\n        exporter = ComplianceMetricsExporter(port=9091)\n        \n        # Set initial compliance states\n        for framework in ['gdpr', 'hipaa']:\n            exporter.collector.update_encryption_status(framework, 'AES-256', 'at_rest', True)\n            exporter.collector.update_encryption_status(framework, 'TLS-1.3', 'in_transit', True)\n            exporter.collector.update_retention_policy(framework, 'personal', 365)\n            exporter.collector.update_retention_policy(framework, 'sensitive', 2555)\n            exporter.collector.update_audit_retention(framework, 2555)\n        \n        await exporter.start()\n    \n    asyncio.run(main())