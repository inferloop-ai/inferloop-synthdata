"""\nAdvanced document generation examples using the Structured Docs Synth SDK.\n\nDemonstrates complex document generation scenarios including:\n- Multi-format document generation\n- Custom templates and layouts\n- Domain-specific document creation\n- Batch processing with quality checks\n- Privacy-compliant generation\n"""\n\nimport asyncio\nimport json\nfrom pathlib import Path\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Any\n\nfrom structured_docs_synth import SynthClient\nfrom structured_docs_synth.generation import DocumentGenerator, TemplateEngine\nfrom structured_docs_synth.privacy import PrivacyManager\nfrom structured_docs_synth.quality import QualityValidator\nfrom structured_docs_synth.core.config import GenerationConfig\n\n\nclass AdvancedDocumentGenerator:\n    """Advanced document generation with custom workflows."""\n    \n    def __init__(self, api_key: str = None):\n        """Initialize with API key or use environment variable."""\n        self.client = SynthClient(api_key=api_key)\n        self.privacy_manager = PrivacyManager()\n        self.quality_validator = QualityValidator()\n    \n    async def generate_financial_report_suite(self) -> Dict[str, Any]:\n        """\n        Generate a complete financial report suite including:\n        - Annual report\n        - Balance sheet\n        - Income statement\n        - Cash flow statement\n        """\n        print("Generating financial report suite...")\n        \n        # Configure generation parameters\n        config = GenerationConfig(\n            domain="banking",\n            document_types=["annual_report", "balance_sheet", "income_statement", "cash_flow"],\n            output_formats=["pdf", "docx", "json"],\n            quality_threshold=0.95,\n            privacy_compliance=["pci_dss", "sox"]\n        )\n        \n        # Generate base financial data\n        company_data = await self.client.generate_company_profile(\n            industry="technology",\n            size="large",\n            revenue_range="1B-5B"\n        )\n        \n        financial_data = await self.client.generate_financial_data(\n            company_id=company_data["id"],\n            fiscal_year=2023,\n            quarters=4\n        )\n        \n        # Generate documents\n        documents = {}\n        \n        # 1. Annual Report\n        annual_report = await self.client.generate_document(\n            document_type="annual_report",\n            template="formal_corporate",\n            data={\n                "company": company_data,\n                "financials": financial_data,\n                "year": 2023,\n                "ceo_letter": await self._generate_ceo_letter(company_data),\n                "highlights": await self._generate_highlights(financial_data)\n            },\n            formats=["pdf", "docx"],\n            options={\n                "include_charts": True,\n                "include_images": True,\n                "professional_design": True\n            }\n        )\n        documents["annual_report"] = annual_report\n        \n        # 2. Balance Sheet\n        balance_sheet = await self.client.generate_document(\n            document_type="balance_sheet",\n            template="standard_accounting",\n            data={\n                "company": company_data,\n                "assets": financial_data["assets"],\n                "liabilities": financial_data["liabilities"],\n                "equity": financial_data["equity"],\n                "period_ending": "2023-12-31"\n            },\n            formats=["pdf", "xlsx", "json"],\n            options={\n                "include_comparisons": True,\n                "previous_years": 2\n            }\n        )\n        documents["balance_sheet"] = balance_sheet\n        \n        # 3. Income Statement\n        income_statement = await self.client.generate_document(\n            document_type="income_statement",\n            template="detailed_breakdown",\n            data={\n                "company": company_data,\n                "revenue": financial_data["revenue"],\n                "expenses": financial_data["expenses"],\n                "net_income": financial_data["net_income"],\n                "period": "FY2023"\n            },\n            formats=["pdf", "xlsx"],\n            options={\n                "show_percentages": True,\n                "include_segment_analysis": True\n            }\n        )\n        documents["income_statement"] = income_statement\n        \n        # 4. Cash Flow Statement\n        cash_flow = await self.client.generate_document(\n            document_type="cash_flow_statement",\n            template="three_section",\n            data={\n                "company": company_data,\n                "operating_activities": financial_data["cash_flow"]["operating"],\n                "investing_activities": financial_data["cash_flow"]["investing"],\n                "financing_activities": financial_data["cash_flow"]["financing"],\n                "period": "FY2023"\n            },\n            formats=["pdf", "xlsx"]\n        )\n        documents["cash_flow"] = cash_flow\n        \n        # Quality validation\n        validation_results = await self._validate_financial_documents(documents)\n        \n        return {\n            "documents": documents,\n            "validation": validation_results,\n            "metadata": {\n                "generated_at": datetime.now().isoformat(),\n                "company_id": company_data["id"],\n                "fiscal_year": 2023\n            }\n        }\n    \n    async def generate_healthcare_forms_batch(self, patient_count: int = 100) -> Dict[str, Any]:\n        """\n        Generate a batch of healthcare forms with HIPAA compliance.\n        """\n        print(f"Generating {patient_count} healthcare forms with HIPAA compliance...")\n        \n        # Configure for HIPAA compliance\n        config = GenerationConfig(\n            domain="healthcare",\n            privacy_compliance=["hipaa"],\n            anonymization_enabled=True,\n            encryption_enabled=True\n        )\n        \n        results = {\n            "generated": [],\n            "failed": [],\n            "statistics": {}\n        }\n        \n        # Generate patients\n        patients = await self.client.generate_batch(\n            resource_type="patient",\n            count=patient_count,\n            options={\n                "include_demographics": True,\n                "include_insurance": True,\n                "include_medical_history": True\n            }\n        )\n        \n        # Generate forms for each patient\n        form_types = [\n            "patient_intake",\n            "consent_form",\n            "insurance_claim",\n            "prescription",\n            "lab_order"\n        ]\n        \n        for patient in patients:\n            patient_forms = {}\n            \n            for form_type in form_types:\n                try:\n                    # Apply privacy protection\n                    protected_data = await self.privacy_manager.protect_phi(\n                        data=patient,\n                        protection_level="high",\n                        preserve_utility=True\n                    )\n                    \n                    # Generate form\n                    form = await self.client.generate_document(\n                        document_type=f"healthcare/{form_type}",\n                        data=protected_data,\n                        formats=["pdf", "json"],\n                        options={\n                            "hipaa_compliant": True,\n                            "include_barcodes": True,\n                            "digital_signature_ready": True\n                        }\n                    )\n                    \n                    patient_forms[form_type] = form\n                    \n                except Exception as e:\n                    results["failed"].append({\n                        "patient_id": patient["id"],\n                        "form_type": form_type,\n                        "error": str(e)\n                    })\n            \n            if patient_forms:\n                results["generated"].append({\n                    "patient_id": patient["id"],\n                    "forms": patient_forms\n                })\n        \n        # Generate statistics\n        results["statistics"] = {\n            "total_requested": patient_count * len(form_types),\n            "total_generated": len(results["generated"]) * len(form_types),\n            "total_failed": len(results["failed"]),\n            "success_rate": len(results["generated"]) / patient_count\n        }\n        \n        return results\n    \n    async def generate_legal_contract_variations(self, base_template: str) -> Dict[str, Any]:\n        """\n        Generate variations of legal contracts for different scenarios.\n        """\n        print("Generating legal contract variations...")\n        \n        # Define variation parameters\n        variations = [\n            {\n                "name": "standard_employment",\n                "type": "employment_contract",\n                "jurisdiction": "california",\n                "terms": {\n                    "duration": "at_will",\n                    "compensation": "salary",\n                    "benefits": "standard",\n                    "ip_assignment": True,\n                    "non_compete": False  # CA restriction\n                }\n            },\n            {\n                "name": "executive_employment",\n                "type": "employment_contract",\n                "jurisdiction": "new_york",\n                "terms": {\n                    "duration": "fixed_term",\n                    "compensation": "salary_plus_equity",\n                    "benefits": "executive",\n                    "severance": "golden_parachute",\n                    "non_compete": True,\n                    "non_solicitation": True\n                }\n            },\n            {\n                "name": "contractor_agreement",\n                "type": "independent_contractor",\n                "jurisdiction": "delaware",\n                "terms": {\n                    "payment": "hourly",\n                    "duration": "project_based",\n                    "ip_ownership": "work_for_hire",\n                    "termination": "30_days_notice"\n                }\n            },\n            {\n                "name": "nda_mutual",\n                "type": "non_disclosure_agreement",\n                "jurisdiction": "delaware",\n                "terms": {\n                    "parties": "mutual",\n                    "duration": "5_years",\n                    "exceptions": "standard",\n                    "governing_law": "delaware"\n                }\n            }\n        ]\n        \n        contracts = {}\n        \n        for variation in variations:\n            # Generate parties\n            parties = await self._generate_contract_parties(variation["type"])\n            \n            # Generate contract\n            contract = await self.client.generate_document(\n                document_type=f"legal/{variation['type']}",\n                template=base_template or "standard_legal",\n                data={\n                    "parties": parties,\n                    "terms": variation["terms"],\n                    "jurisdiction": variation["jurisdiction"],\n                    "effective_date": datetime.now().strftime("%B %d, %Y"),\n                    "clauses": await self._generate_legal_clauses(variation)\n                },\n                formats=["pdf", "docx"],\n                options={\n                    "include_schedules": True,\n                    "include_exhibits": True,\n                    "signature_blocks": len(parties),\n                    "watermark": "DRAFT"\n                }\n            )\n            \n            # Validate legal compliance\n            validation = await self._validate_legal_document(\n                contract,\n                jurisdiction=variation["jurisdiction"]\n            )\n            \n            contracts[variation["name"]] = {\n                "document": contract,\n                "validation": validation,\n                "metadata": variation\n            }\n        \n        return {\n            "contracts": contracts,\n            "summary": {\n                "total_generated": len(contracts),\n                "types": list(set(v["type"] for v in variations)),\n                "jurisdictions": list(set(v["jurisdiction"] for v in variations))\n            }\n        }\n    \n    async def generate_with_custom_template(self, template_path: str, data: Dict[str, Any]) -> Dict[str, Any]:\n        """\n        Generate document using a custom template.\n        """\n        print(f"Generating document with custom template: {template_path}")\n        \n        # Load custom template\n        template_engine = TemplateEngine()\n        template = await template_engine.load_template(template_path)\n        \n        # Validate template\n        validation = await template_engine.validate_template(template)\n        if not validation["valid"]:\n            raise ValueError(f"Invalid template: {validation['errors']}")\n        \n        # Merge data with template\n        document_data = await template_engine.merge_data(template, data)\n        \n        # Generate document\n        document = await self.client.generate_document(\n            document_type="custom",\n            template=template,\n            data=document_data,\n            formats=["pdf", "docx", "html"],\n            options={\n                "preserve_formatting": True,\n                "embed_fonts": True,\n                "compress_images": True\n            }\n        )\n        \n        return document\n    \n    async def _generate_ceo_letter(self, company_data: Dict[str, Any]) -> str:\n        """Generate CEO letter for annual report."""\n        prompt = f"""\n        Generate a CEO letter for the annual report of {company_data['name']}, \n        a {company_data['industry']} company with {company_data['employees']} employees.\n        Focus on: growth, innovation, sustainability, and shareholder value.\n        """\n        \n        return await self.client.generate_text(\n            prompt=prompt,\n            max_length=500,\n            style="formal_business"\n        )\n    \n    async def _generate_highlights(self, financial_data: Dict[str, Any]) -> List[str]:\n        """Generate financial highlights."""\n        highlights = []\n        \n        # Revenue growth\n        revenue_growth = financial_data.get("revenue_growth_pct", 0)\n        if revenue_growth > 0:\n            highlights.append(f"Revenue increased {revenue_growth}% year-over-year")\n        \n        # Profitability\n        net_margin = financial_data.get("net_margin_pct", 0)\n        highlights.append(f"Net profit margin of {net_margin}%")\n        \n        # Cash position\n        cash = financial_data.get("cash_and_equivalents", 0)\n        highlights.append(f"Strong cash position of ${cash:,.0f}")\n        \n        return highlights\n    \n    async def _validate_financial_documents(self, documents: Dict[str, Any]) -> Dict[str, Any]:\n        """Validate financial documents for accuracy and compliance."""\n        validation_results = {}\n        \n        for doc_type, document in documents.items():\n            validation = await self.quality_validator.validate_document(\n                document=document,\n                checks=[\n                    "numerical_accuracy",\n                    "formula_verification",\n                    "cross_reference_validation",\n                    "compliance_check"\n                ]\n            )\n            validation_results[doc_type] = validation\n        \n        return validation_results\n    \n    async def _generate_contract_parties(self, contract_type: str) -> List[Dict[str, Any]]:\n        """Generate parties for contracts."""\n        if contract_type == "employment_contract":\n            return [\n                await self.client.generate_entity("company"),\n                await self.client.generate_entity("individual")\n            ]\n        elif contract_type == "non_disclosure_agreement":\n            return [\n                await self.client.generate_entity("company"),\n                await self.client.generate_entity("company")\n            ]\n        else:\n            return [\n                await self.client.generate_entity("company"),\n                await self.client.generate_entity("individual")\n            ]\n    \n    async def _generate_legal_clauses(self, variation: Dict[str, Any]) -> List[Dict[str, Any]]:\n        """Generate appropriate legal clauses based on contract type."""\n        return await self.client.generate_legal_clauses(\n            contract_type=variation["type"],\n            jurisdiction=variation["jurisdiction"],\n            terms=variation["terms"]\n        )\n    \n    async def _validate_legal_document(self, document: Dict[str, Any], jurisdiction: str) -> Dict[str, Any]:\n        """Validate legal document for jurisdiction compliance."""\n        return await self.client.validate_legal_compliance(\n            document=document,\n            jurisdiction=jurisdiction,\n            checks=["required_clauses", "prohibited_terms", "formatting_requirements"]\n        )\n\n\n# Example usage\nasync def main():\n    # Initialize generator\n    generator = AdvancedDocumentGenerator()\n    \n    # Example 1: Generate financial report suite\n    print("\n=== Financial Report Suite ===")\n    financial_suite = await generator.generate_financial_report_suite()\n    print(f"Generated {len(financial_suite['documents'])} financial documents")\n    print(f"Validation results: {financial_suite['validation']}")\n    \n    # Example 2: Generate healthcare forms batch\n    print("\n=== Healthcare Forms Batch ===")\n    healthcare_batch = await generator.generate_healthcare_forms_batch(patient_count=10)\n    print(f"Generated forms for {len(healthcare_batch['generated'])} patients")\n    print(f"Success rate: {healthcare_batch['statistics']['success_rate']:.2%}")\n    \n    # Example 3: Generate legal contract variations\n    print("\n=== Legal Contract Variations ===")\n    contracts = await generator.generate_legal_contract_variations("modern_legal")\n    print(f"Generated {len(contracts['contracts'])} contract variations")\n    for name, contract_data in contracts['contracts'].items():\n        print(f"  - {name}: {contract_data['metadata']['type']}")\n    \n    # Example 4: Custom template generation\n    print("\n=== Custom Template Generation ===")\n    custom_doc = await generator.generate_with_custom_template(\n        template_path="templates/custom_invoice.jinja2",\n        data={\n            "invoice_number": "INV-2024-001",\n            "customer": {"name": "Acme Corp", "address": "123 Main St"},\n            "items": [\n                {"description": "Consulting Services", "amount": 5000},\n                {"description": "Software License", "amount": 2000}\n            ],\n            "total": 7000\n        }\n    )\n    print(f"Generated custom document in {len(custom_doc['formats'])} formats")\n\n\nif __name__ == "__main__":\n    asyncio.run(main())