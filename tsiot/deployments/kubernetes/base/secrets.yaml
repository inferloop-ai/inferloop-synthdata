# NOTE: This file contains placeholder secrets for demonstration purposes.
# In production, these should be managed by external secret management systems
# like AWS Secrets Manager, HashiCorp Vault, or Kubernetes External Secrets Operator.

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-database-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-database
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    # Reference to AWS Secrets Manager secret
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/database-abc123"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  # Base64 encoded values (these are placeholder values)
  # In production, use: echo -n 'actual_value' | base64
  TSIOT_DB_USER: dHNpb3RfdXNlcg==  # tsiot_user
  TSIOT_DB_PASSWORD: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=  # change-me-in-production
  TSIOT_DB_HOST: cG9zdGdyZXMtc2VydmljZS50c2lvdC5zdmMuY2x1c3Rlci5sb2NhbA==  # postgres-service.tsiot.svc.cluster.local
  TSIOT_DB_PORT: NTQzMg==  # 5432
  TSIOT_DB_NAME: dHNpb3Q=  # tsiot

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-redis-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-redis
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: redis
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/redis-def456"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_REDIS_PASSWORD: cmVkaXMtcGFzc3dvcmQtY2hhbmdlLW1l  # redis-password-change-me
  TSIOT_REDIS_AUTH_TOKEN: cmVkaXMtYXV0aC10b2tlbi1jaGFuZ2UtbWU=  # redis-auth-token-change-me

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-kafka-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-kafka
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: kafka
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/kafka-ghi789"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_KAFKA_USERNAME: dHNpb3Rfa2Fma2E=  # tsiot_kafka
  TSIOT_KAFKA_PASSWORD: a2Fma2EtcGFzc3dvcmQtY2hhbmdlLW1l  # kafka-password-change-me
  TSIOT_KAFKA_SASL_MECHANISM: U0NSQU0tU0hBLTUxMg==  # SCRAM-SHA-512

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-influxdb-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-influxdb
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: influxdb
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/influxdb-jkl012"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_INFLUXDB_TOKEN: aW5mbHV4ZGItdG9rZW4tY2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=  # influxdb-token-change-me-in-production
  TSIOT_INFLUXDB_USERNAME: dHNpb3RfaW5mbHV4  # tsiot_influx
  TSIOT_INFLUXDB_PASSWORD: aW5mbHV4LXBhc3N3b3JkLWNoYW5nZS1tZQ==  # influx-password-change-me

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-elasticsearch-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-elasticsearch
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: elasticsearch
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/elasticsearch-mno345"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_ELASTICSEARCH_USERNAME: dHNpb3RfZWxhc3RpYw==  # tsiot_elastic
  TSIOT_ELASTICSEARCH_PASSWORD: ZWxhc3RpYy1wYXNzd29yZC1jaGFuZ2UtbWU=  # elastic-password-change-me

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-s3-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-s3
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: s3
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/s3-pqr678"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_S3_ACCESS_KEY: QUtJQTEyMzQ1Njc4OTBBQkNERUY=  # AKIA1234567890ABCDEF
  TSIOT_S3_SECRET_KEY: YWJjZGVmZ2hpams=  # abcdefghijk (this should be much longer in production)
  TSIOT_S3_SESSION_TOKEN: ""  # Optional session token for temporary credentials

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-jwt-secret
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-jwt
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: authentication
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/jwt-stu901"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "24h"
type: Opaque
data:
  TSIOT_JWT_SECRET: anlQdC1zZWNyZXQta2V5LWNoYW5nZS1tZS1pbi1wcm9kdWN0aW9uLWFuZC1tYWtlLWl0LWxvbmdlcg==  # jwt-secret-key-change-me-in-production-and-make-it-longer
  TSIOT_JWT_ISSUER: dHNpb3QtcGxhdGZvcm0=  # tsiot-platform
  TSIOT_JWT_AUDIENCE: dHNpb3QtdXNlcnM=  # tsiot-users

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-encryption-keys
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-encryption
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: encryption
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/encryption-vwx234"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "24h"
type: Opaque
data:
  # AES-256 encryption key (32 bytes base64 encoded)
  TSIOT_ENCRYPTION_KEY: YWVzLTI1Ni1lbmNyeXB0aW9uLWtleS1jaGFuZ2UtbWUtaW4tcHJvZHVjdGlvbi0zMi1ieXRlcw==
  # HMAC signing key
  TSIOT_SIGNING_KEY: aG1hYy1zaWduaW5nLWtleS1jaGFuZ2UtbWUtaW4tcHJvZHVjdGlvbg==

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-mqtt-credentials
  namespace: tsiot
  labels:
    app.kubernetes.io/name: tsiot-mqtt
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: mqtt
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/mqtt-yz5678"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "1h"
type: Opaque
data:
  TSIOT_MQTT_USERNAME: dHNpb3RfbXF0dA==  # tsiot_mqtt
  TSIOT_MQTT_PASSWORD: bXF0dC1wYXNzd29yZC1jaGFuZ2UtbWU=  # mqtt-password-change-me
  TSIOT_MQTT_CLIENT_CERT: ""  # Client certificate for mTLS (if required)
  TSIOT_MQTT_CLIENT_KEY: ""   # Client private key for mTLS (if required)

---
apiVersion: v1
kind: Secret
metadata:
  name: tsiot-monitoring-credentials
  namespace: tsiot-monitoring
  labels:
    app.kubernetes.io/name: tsiot-monitoring
    app.kubernetes.io/instance: tsiot
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: tsiot-platform
    app.kubernetes.io/managed-by: kubectl
  annotations:
    secrets-manager.io/secret-arn: "arn:aws:secretsmanager:us-west-2:123456789012:secret:tsiot/prod/monitoring-abc901"
    secrets-manager.io/auto-refresh: "true"
    secrets-manager.io/refresh-interval: "24h"
type: Opaque
data:
  # Grafana admin credentials
  GRAFANA_ADMIN_USER: YWRtaW4=  # admin
  GRAFANA_ADMIN_PASSWORD: Z3JhZmFuYS1hZG1pbi1wYXNzd29yZC1jaGFuZ2UtbWU=  # grafana-admin-password-change-me
  
  # AlertManager webhook secrets
  ALERTMANAGER_WEBHOOK_SECRET: YWxlcnRtYW5hZ2VyLXdlYmhvb2stc2VjcmV0LWNoYW5nZS1tZQ==  # alertmanager-webhook-secret-change-me
  
  # Prometheus remote write credentials (if using remote storage)
  PROMETHEUS_REMOTE_WRITE_USERNAME: cHJvbWV0aGV1c19yZW1vdGU=  # prometheus_remote
  PROMETHEUS_REMOTE_WRITE_PASSWORD: cHJvbWV0aGV1cy1yZW1vdGUtcGFzc3dvcmQtY2hhbmdlLW1l  # prometheus-remote-password-change-me

---
# External Secrets Operator configuration example
# This would be used in production to sync secrets from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: tsiot-secrets-store
  namespace: tsiot
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# Example External Secret for database credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tsiot-database-external-secret
  namespace: tsiot
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: tsiot-secrets-store
    kind: SecretStore
  target:
    name: tsiot-database-credentials
    creationPolicy: Owner
  data:
  - secretKey: TSIOT_DB_USER
    remoteRef:
      key: tsiot/prod/database
      property: username
  - secretKey: TSIOT_DB_PASSWORD
    remoteRef:
      key: tsiot/prod/database
      property: password
  - secretKey: TSIOT_DB_HOST
    remoteRef:
      key: tsiot/prod/database
      property: host
  - secretKey: TSIOT_DB_PORT
    remoteRef:
      key: tsiot/prod/database
      property: port
  - secretKey: TSIOT_DB_NAME
    remoteRef:
      key: tsiot/prod/database
      property: database