# Multi-stage build for TSIoT CLI
# Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    git \
    make \
    bash \
    gcc \
    musl-dev \
    ca-certificates \
    tzdata

# Set working directory
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the CLI binary
RUN CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-w -s -X main.version=$(git describe --tags --always --dirty) -X main.commit=$(git rev-parse HEAD) -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -a -installsuffix cgo \
    -o tsiot-cli \
    ./cmd/cli

# Production stage
FROM alpine:3.18

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl \
    jq \
    bash \
    && update-ca-certificates

# Create non-root user
RUN addgroup -g 1001 -S tsiot && \
    adduser -u 1001 -S tsiot -G tsiot

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/tsiot-cli /usr/local/bin/tsiot-cli

# Copy configuration files
COPY --from=builder /app/configs /app/configs

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/tmp && \
    chown -R tsiot:tsiot /app

# Set up timezone
ENV TZ=UTC

# Switch to non-root user
USER tsiot

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD tsiot-cli version || exit 1

# Set entrypoint
ENTRYPOINT ["tsiot-cli"]

# Default command
CMD ["--help"]

# Labels
LABEL maintainer="TSIoT Team"
LABEL version="1.0.0"
LABEL description="TSIoT CLI for time series synthetic data generation"
LABEL org.opencontainers.image.title="TSIoT CLI"
LABEL org.opencontainers.image.description="Command line interface for TSIoT platform"
LABEL org.opencontainers.image.vendor="TSIoT"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/tsiot/tsiot"