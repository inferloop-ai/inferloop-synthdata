# Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o tsiot-server ./cmd/server

# Final stage
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata curl

# Create non-root user
RUN addgroup -S tsiot && adduser -S tsiot -G tsiot

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/tsiot-server .

# Copy configuration files
COPY --from=builder /app/configs/ ./configs/

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R tsiot:tsiot /app

# Switch to non-root user
USER tsiot

# Expose ports
EXPOSE 8080 9090 50051

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Set entrypoint
ENTRYPOINT ["./tsiot-server"]

# Default command
CMD ["--config", "./configs/server.yaml"]