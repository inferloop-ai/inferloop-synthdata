# Prometheus configuration for Time Series Synthetic Data MCP Server
global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'tsiot-cluster'
    region: 'us-west-2'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  - "alert-rules.yml"
  - "recording-rules.yml"

# Scrape configuration
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    metrics_path: /metrics
    scrape_interval: 30s

  # TSIOT MCP Server
  - job_name: 'tsiot-server'
    static_configs:
      - targets: 
        - 'localhost:9090'
        - 'tsiot-server-1:9090'
        - 'tsiot-server-2:9090'
        - 'tsiot-server-3:9090'
    metrics_path: /metrics
    scrape_interval: 15s
    scrape_timeout: 10s
    honor_labels: true
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
      - source_labels: [__address__]
        regex: '([^:]+):.*'
        target_label: host
        replacement: '${1}'

  # TSIOT Workers
  - job_name: 'tsiot-workers'
    static_configs:
      - targets:
        - 'tsiot-worker-1:9091'
        - 'tsiot-worker-2:9091'
        - 'tsiot-worker-3:9091'
    metrics_path: /metrics
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: worker_instance

  # TSIOT CLI (if metrics enabled)
  - job_name: 'tsiot-cli'
    static_configs:
      - targets: ['localhost:9092']
    metrics_path: /metrics
    scrape_interval: 30s
    honor_timestamps: true

  # Node Exporter (System metrics)
  - job_name: 'node-exporter'
    static_configs:
      - targets:
        - 'node-exporter:9100'
        - 'tsiot-server-1:9100'
        - 'tsiot-server-2:9100'
        - 'tsiot-server-3:9100'
    metrics_path: /metrics
    scrape_interval: 15s

  # InfluxDB metrics
  - job_name: 'influxdb'
    static_configs:
      - targets: ['influxdb:8086']
    metrics_path: /metrics
    scrape_interval: 30s

  # TimescaleDB metrics (via postgres_exporter)
  - job_name: 'timescaledb'
    static_configs:
      - targets: ['postgres-exporter:9187']
    metrics_path: /metrics
    scrape_interval: 30s

  # Redis metrics
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']
    metrics_path: /metrics
    scrape_interval: 30s

  # Kafka metrics
  - job_name: 'kafka'
    static_configs:
      - targets: 
        - 'kafka-1:9308'
        - 'kafka-2:9308'
        - 'kafka-3:9308'
    metrics_path: /metrics
    scrape_interval: 30s

  # MQTT Broker metrics
  - job_name: 'mqtt-broker'
    static_configs:
      - targets: ['mosquitto-exporter:9234']
    metrics_path: /metrics
    scrape_interval: 30s

  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    metrics_path: /metrics
    scrape_interval: 30s

  # Kubernetes API Server (if running on k8s)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
      - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

  # Kubernetes nodes (if running on k8s)
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
      - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

  # Kubernetes pods (if running on k8s)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
      - role: pod
    relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

  # Service discovery for TSIOT services
  - job_name: 'tsiot-service-discovery'
    consul_sd_configs:
      - server: 'consul:8500'
        services: ['tsiot-server', 'tsiot-worker', 'tsiot-cli']
    relabel_configs:
      - source_labels: [__meta_consul_service]
        target_label: service
      - source_labels: [__meta_consul_node]
        target_label: node
      - source_labels: [__meta_consul_service_address]
        target_label: instance

  # BlackBox Exporter for endpoint monitoring
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
        - http://tsiot-server:8080/health
        - http://tsiot-server:8080/ready
        - http://tsiot-server:8080/metrics
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

# Remote write configuration (for long-term storage)
remote_write:
  - url: "https://prometheus-remote-write.example.com/api/v1/write"
    basic_auth:
      username: "${REMOTE_WRITE_USERNAME}"
      password: "${REMOTE_WRITE_PASSWORD}"
    write_relabel_configs:
      - source_labels: [__name__]
        regex: 'tsiot_.*'
        action: keep

# Remote read configuration
remote_read:
  - url: "https://prometheus-remote-read.example.com/api/v1/read"
    basic_auth:
      username: "${REMOTE_READ_USERNAME}"
      password: "${REMOTE_READ_PASSWORD}"

# Storage configuration
storage:
  tsdb:
    retention.time: 15d
    retention.size: 10GB
    wal-compression: true