AWSTemplateFormatVersion: '2010-09-09'
Description: 'Inferloop Synthetic Data - Security Configuration'

Parameters:
  ProjectId:
    Type: String
    Description: Project identifier
    
  Environment:
    Type: String
    Description: Deployment environment
    
  VpcId:
    Type: String
    Description: VPC ID from networking stack

Resources:
  # Application Security Group
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectId}-${Environment}-app-sg'
      GroupDescription: Security group for application instances
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16  # Only from within VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectId}-${Environment}-app-sg'
          
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectId}-${Environment}-lb-ref-sg'
      GroupDescription: Reference to load balancer security group
      VpcId: !Ref VpcId
      
  # IAM Role for EC2 Instances
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-${Environment}-instance-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${ProjectId}-${Environment}-*'
                  - !Sub 'arn:aws:s3:::${ProjectId}-${Environment}-*/*'
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
                
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${ProjectId}-${Environment}-instance-profile'
      Roles:
        - !Ref InstanceRole
        
  # IAM Role for ECS Tasks
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-${Environment}-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-${Environment}-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${ProjectId}-${Environment}-*'
                  - !Sub 'arn:aws:s3:::${ProjectId}-${Environment}-*/*'
                  
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectId}-${Environment}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ProjectId}-*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ProjectId}-${Environment}-*/*'
                  
  # KMS Key for Encryption
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub 'KMS key for ${ProjectId} ${Environment} environment'
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-policy-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow services to use the key
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
                - dynamodb.amazonaws.com
                - logs.amazonaws.com
            Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Resource: '*'
            
  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${ProjectId}-${Environment}'
      TargetKeyId: !Ref KmsKey
      
  # Secrets Manager for sensitive configuration
  ApplicationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectId}/${Environment}/config'
      Description: Application configuration secrets
      KmsKeyId: !Ref KmsKey
      SecretString: !Sub |
        {
          "database_url": "postgresql://user:pass@host:5432/db",
          "api_key": "change-me",
          "jwt_secret": "change-me"
        }

Outputs:
  ApplicationSecurityGroupId:
    Description: Application security group ID
    Value: !Ref ApplicationSecurityGroup
    
  InstanceRole:
    Description: IAM role for EC2 instances
    Value: !GetAtt InstanceRole.Arn
    
  InstanceProfileArn:
    Description: Instance profile ARN
    Value: !GetAtt InstanceProfile.Arn
    
  EcsTaskExecutionRoleArn:
    Description: ECS task execution role ARN
    Value: !GetAtt EcsTaskExecutionRole.Arn
    
  EcsTaskRoleArn:
    Description: ECS task role ARN
    Value: !GetAtt EcsTaskRole.Arn
    
  LambdaExecutionRoleArn:
    Description: Lambda execution role ARN
    Value: !GetAtt LambdaExecutionRole.Arn
    
  KmsKeyId:
    Description: KMS key ID
    Value: !Ref KmsKey
    
  KmsKeyArn:
    Description: KMS key ARN
    Value: !GetAtt KmsKey.Arn
    
  ApplicationSecretArn:
    Description: Application secret ARN
    Value: !Ref ApplicationSecret