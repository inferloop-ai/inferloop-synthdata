AWSTemplateFormatVersion: '2010-09-09'
Description: 'Inferloop Synthetic Data - Monitoring and Observability'

Parameters:
  ProjectId:
    Type: String
    Description: Project identifier
    
  Environment:
    Type: String
    Description: Deployment environment
    
  AutoScalingGroupName:
    Type: String
    Description: Auto Scaling Group name to monitor
    
  LoadBalancerName:
    Type: String
    Description: Load Balancer name to monitor
    
  SNSEmail:
    Type: String
    Description: Email address for alerts
    Default: alerts@example.com

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectId}-${Environment}-alerts'
      DisplayName: !Sub '${ProjectId} ${Environment} Alerts'
      Subscription:
        - Endpoint: !Ref SNSEmail
          Protocol: email
          
  # CloudWatch Dashboard
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectId}-${Environment}-dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/EC2", "CPUUtilization", { "stat": "Average" } ],
                  [ ".", ".", { "stat": "Maximum" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "EC2 CPU Utilization",
                "period": 300,
                "annotations": {
                  "horizontal": [
                    {
                      "label": "Warning threshold",
                      "value": 70
                    },
                    {
                      "label": "Critical threshold",
                      "value": 90
                    }
                  ]
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ApplicationELB", "TargetResponseTime", { "stat": "Average" } ],
                  [ ".", "RequestCount", { "stat": "Sum", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Load Balancer Metrics",
                "period": 300,
                "yAxis": {
                  "right": {
                    "label": "Request Count"
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/ECS", "CPUUtilization", "ServiceName", "${ProjectId}-${Environment}-service", { "stat": "Average" } ],
                  [ ".", "MemoryUtilization", ".", ".", { "stat": "Average" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "ECS Service Utilization",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/S3", "NumberOfObjects", "BucketName", "${ProjectId}-${Environment}-${AWS::AccountId}-data", { "stat": "Maximum" } ],
                  [ ".", "BucketSizeBytes", ".", ".", { "stat": "Maximum", "yAxis": "right" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "S3 Storage Metrics",
                "period": 86400,
                "yAxis": {
                  "right": {
                    "label": "Size (Bytes)"
                  }
                }
              }
            }
          ]
        }
        
  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-high-cpu'
      AlarmDescription: CPU utilization is too high
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroupName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-high-memory'
      AlarmDescription: Memory utilization is too high
      MetricName: MemoryUtilization
      Namespace: CWAgent
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroupName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  UnhealthyTargetsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-unhealthy-targets'
      AlarmDescription: Load balancer has unhealthy targets
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref LoadBalancerName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  ResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-high-response-time'
      AlarmDescription: Application response time is too high
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 3
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref LoadBalancerName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  Error4xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-4xx-errors'
      AlarmDescription: Too many 4xx errors
      MetricName: HTTPCode_Target_4XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref LoadBalancerName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  Error5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-5xx-errors'
      AlarmDescription: Too many 5xx errors
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: LoadBalancer
          Value: !Ref LoadBalancerName
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  # CloudWatch Logs Metric Filters
  ErrorLogMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      FilterName: !Sub '${ProjectId}-${Environment}-error-logs'
      FilterPattern: '[timestamp, request_id, level=ERROR, message]'
      LogGroupName: !Sub '/ecs/${ProjectId}-${Environment}'
      MetricTransformations:
        - MetricName: ErrorCount
          MetricNamespace: !Sub '${ProjectId}/${Environment}'
          MetricValue: '1'
          DefaultValue: 0
          
  ErrorLogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectId}-${Environment}-error-logs'
      AlarmDescription: Too many ERROR logs
      MetricName: ErrorCount
      Namespace: !Sub '${ProjectId}/${Environment}'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      
  # X-Ray Service Map
  XRayServiceMap:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt XRayServiceMapFunction.Arn
      ServiceName: !Sub '${ProjectId}-${Environment}'
      
  XRayServiceMapFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectId}-${Environment}-xray-setup'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !ImportValue
        Fn::Sub: '${AWS::StackName}-LambdaExecutionRoleArn'
      Timeout: 60
      Code:
        ZipFile: |
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              # This is a placeholder for X-Ray service map setup
              # In a real implementation, you would configure X-Ray sampling rules
              response_data = {
                  'Message': 'X-Ray configuration completed'
              }
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
  # CloudWatch Insights Queries
  InsightsQueryDefinitions:
    Type: AWS::Logs::QueryDefinition
    Properties:
      Name: !Sub '${ProjectId}-${Environment}-top-errors'
      LogGroupNames:
        - !Sub '/ecs/${ProjectId}-${Environment}'
      QueryString: |
        fields @timestamp, @message
        | filter @message like /ERROR/
        | stats count() by bin(5m)
        
  # Cost Anomaly Detector
  CostAnomalyDetector:
    Type: AWS::CE::AnomalyMonitor
    Properties:
      MonitorName: !Sub '${ProjectId}-${Environment}-cost-monitor'
      MonitorType: DIMENSIONAL
      MonitorDimension: SERVICE
      
  CostAnomalySubscription:
    Type: AWS::CE::AnomalySubscription
    Properties:
      SubscriptionName: !Sub '${ProjectId}-${Environment}-cost-alerts'
      Threshold: 100
      Frequency: DAILY
      MonitorArnList:
        - !Ref CostAnomalyDetector
      Subscribers:
        - Address: !Ref SNSEmail
          Type: EMAIL
          Status: CONFIRMED

Outputs:
  DashboardURL:
    Description: CloudWatch Dashboard URL
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectId}-${Environment}-dashboard'
    
  AlertTopicArn:
    Description: SNS Alert Topic ARN
    Value: !Ref AlertTopic
    
  LogGroupName:
    Description: CloudWatch Log Group name
    Value: !Sub '/ecs/${ProjectId}-${Environment}'