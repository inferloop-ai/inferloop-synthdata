"""\nCustom Faker providers for generating domain-specific synthetic data.\n\nProvides specialized data generators for various business domains including\nbanking, healthcare, legal, insurance, and government documents.\n"""\n\nimport random\nimport string\nfrom datetime import datetime, timedelta\nfrom decimal import Decimal\nfrom typing import List, Dict, Any, Optional\n\nfrom faker import Faker\nfrom faker.providers import BaseProvider\n\n\nclass BankingProvider(BaseProvider):\n    """Custom Faker provider for banking-specific data."""\n    \n    def __init__(self, generator):\n        super().__init__(generator)\n        self.fake = Faker()\n    \n    def bank_account_number(self, length: int = 10) -> str:\n        """Generate a bank account number."""\n        # First digit should not be 0\n        first_digit = self.random_int(min=1, max=9)\n        remaining_digits = ''.join([str(self.random_int(min=0, max=9)) for _ in range(length - 1)])\n        return str(first_digit) + remaining_digits\n    \n    def routing_number(self) -> str:\n        """Generate a valid US routing number with checksum."""\n        # Generate 8 digits\n        digits = [self.random_int(min=0, max=9) for _ in range(8)]\n        \n        # Calculate checksum\n        checksum = (\n            3 * (digits[0] + digits[3] + digits[6]) +\n            7 * (digits[1] + digits[4] + digits[7]) +\n            1 * (digits[2] + digits[5])\n        ) % 10\n        \n        checksum = (10 - checksum) % 10\n        digits.append(checksum)\n        \n        return ''.join(map(str, digits))\n    \n    def iban(self, country_code: str = 'GB') -> str:\n        """Generate an IBAN number."""\n        country_lengths = {\n            'GB': 22, 'DE': 22, 'FR': 27, 'IT': 27,\n            'ES': 24, 'NL': 18, 'BE': 16, 'CH': 21\n        }\n        \n        length = country_lengths.get(country_code, 24)\n        bank_code = ''.join([str(self.random_int(0, 9)) for _ in range(4)])\n        account = ''.join([str(self.random_int(0, 9)) for _ in range(length - 6)])\n        \n        # Simple check digits (in real implementation, use mod-97 algorithm)\n        check_digits = str(self.random_int(10, 99))\n        \n        return f"{country_code}{check_digits}{bank_code}{account}"\n    \n    def swift_code(self) -> str:\n        """Generate a SWIFT/BIC code."""\n        bank_code = ''.join(random.choices(string.ascii_uppercase, k=4))\n        country_code = self.random_element(['US', 'GB', 'DE', 'FR', 'JP', 'CH'])\n        location_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=2))\n        branch_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=3)) if random.random() > 0.5 else ''\n        \n        return f"{bank_code}{country_code}{location_code}{branch_code}"\n    \n    def credit_card_number(self, card_type: str = None) -> str:\n        """Generate a valid credit card number using Luhn algorithm."""\n        prefixes = {\n            'visa': ['4'],\n            'mastercard': ['51', '52', '53', '54', '55', '22', '23', '24', '25', '26', '27'],\n            'amex': ['34', '37'],\n            'discover': ['6011', '65']\n        }\n        \n        if not card_type:\n            card_type = self.random_element(list(prefixes.keys()))\n        \n        prefix = self.random_element(prefixes[card_type])\n        length = 16 if card_type != 'amex' else 15\n        \n        # Generate digits\n        num_digits = length - len(prefix) - 1\n        digits = prefix + ''.join([str(self.random_int(0, 9)) for _ in range(num_digits)])\n        \n        # Calculate Luhn check digit\n        total = 0\n        for i, digit in enumerate(reversed(digits)):\n            n = int(digit)\n            if i % 2 == 0:\n                n *= 2\n                if n > 9:\n                    n -= 9\n            total += n\n        \n        check_digit = (10 - (total % 10)) % 10\n        return digits + str(check_digit)\n    \n    def transaction_reference(self) -> str:\n        """Generate a transaction reference number."""\n        prefix = self.random_element(['TXN', 'REF', 'PMT'])\n        date_part = datetime.now().strftime('%Y%m%d')\n        random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))\n        return f"{prefix}-{date_part}-{random_part}"\n    \n    def loan_amount(self, min_amount: int = 1000, max_amount: int = 1000000) -> Decimal:\n        """Generate a loan amount."""\n        amount = self.random_int(min=min_amount, max=max_amount)\n        # Round to nearest 100 or 1000\n        if amount > 10000:\n            amount = round(amount / 1000) * 1000\n        else:\n            amount = round(amount / 100) * 100\n        return Decimal(str(amount))\n    \n    def interest_rate(self, min_rate: float = 2.0, max_rate: float = 25.0) -> float:\n        """Generate an interest rate."""\n        rate = random.uniform(min_rate, max_rate)\n        return round(rate, 2)\n\n\nclass HealthcareProvider(BaseProvider):\n    """Custom Faker provider for healthcare-specific data."""\n    \n    def medical_record_number(self) -> str:\n        """Generate a medical record number."""\n        prefix = 'MRN'\n        digits = ''.join([str(self.random_int(0, 9)) for _ in range(8)])\n        return f"{prefix}{digits}"\n    \n    def npi_number(self) -> str:\n        """Generate a National Provider Identifier (NPI) number."""\n        # NPI is 10 digits with Luhn check digit\n        digits = [self.random_int(1, 9)]  # First digit 1-9\n        digits.extend([self.random_int(0, 9) for _ in range(8)])\n        \n        # Calculate Luhn check digit\n        total = 0\n        for i, digit in enumerate(reversed(digits)):\n            n = digit\n            if i % 2 == 0:\n                n *= 2\n                if n > 9:\n                    n -= 9\n            total += n\n        \n        check_digit = (10 - (total % 10)) % 10\n        digits.append(check_digit)\n        \n        return ''.join(map(str, digits))\n    \n    def dea_number(self) -> str:\n        """Generate a DEA registration number."""\n        # Format: 2 letters + 7 digits\n        registrant_type = self.random_element(['A', 'B', 'F', 'M'])\n        last_name_initial = random.choice(string.ascii_uppercase)\n        digits = ''.join([str(self.random_int(0, 9)) for _ in range(7)])\n        return f"{registrant_type}{last_name_initial}{digits}"\n    \n    def icd10_code(self) -> str:\n        """Generate an ICD-10 diagnosis code."""\n        # Simplified ICD-10 code generation\n        letter = self.random_element(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'])\n        digits = str(self.random_int(0, 99)).zfill(2)\n        decimal = str(self.random_int(0, 9))\n        return f"{letter}{digits}.{decimal}"\n    \n    def cpt_code(self) -> str:\n        """Generate a CPT procedure code."""\n        # CPT codes are 5 digits\n        categories = {\n            'evaluation': range(99201, 99499),\n            'anesthesia': range(00100, 01999),\n            'surgery': range(10021, 69990),\n            'radiology': range(70010, 79999),\n            'pathology': range(80047, 89398),\n            'medicine': range(90281, 99607)\n        }\n        \n        category = self.random_element(list(categories.keys()))\n        code_range = categories[category]\n        return str(self.random_int(min=code_range.start, max=code_range.stop))\n    \n    def medication_name(self) -> str:\n        """Generate a medication name."""\n        prefixes = ['Amo', 'Cepha', 'Hydro', 'Metro', 'Oxy', 'Para', 'Pred', 'Sim', 'Var', 'Zol']\n        suffixes = ['cillin', 'prazole', 'statin', 'pril', 'olol', 'azole', 'cycline', 'tropium', 'setron', 'dipine']\n        \n        return self.random_element(prefixes) + self.random_element(suffixes).lower()\n    \n    def dosage(self) -> str:\n        """Generate a medication dosage."""\n        amounts = [5, 10, 20, 25, 50, 100, 200, 250, 500, 1000]\n        units = ['mg', 'mcg', 'g', 'mL', 'units']\n        \n        return f"{self.random_element(amounts)} {self.random_element(units)}"\n    \n    def vital_signs(self) -> Dict[str, Any]:\n        """Generate vital signs."""\n        return {\n            'blood_pressure': f"{self.random_int(90, 140)}/{self.random_int(60, 90)}",\n            'heart_rate': self.random_int(60, 100),\n            'temperature': round(random.uniform(97.0, 99.5), 1),\n            'respiratory_rate': self.random_int(12, 20),\n            'oxygen_saturation': self.random_int(95, 100)\n        }\n    \n    def lab_result(self, test_name: str = None) -> Dict[str, Any]:\n        """Generate a lab test result."""\n        tests = {\n            'glucose': {'value': self.random_int(70, 120), 'unit': 'mg/dL', 'range': '70-100'},\n            'hemoglobin': {'value': round(random.uniform(12.0, 17.0), 1), 'unit': 'g/dL', 'range': '12.0-17.0'},\n            'wbc': {'value': round(random.uniform(4.5, 11.0), 1), 'unit': '10^9/L', 'range': '4.5-11.0'},\n            'platelet': {'value': self.random_int(150, 400), 'unit': '10^9/L', 'range': '150-400'},\n            'creatinine': {'value': round(random.uniform(0.6, 1.2), 1), 'unit': 'mg/dL', 'range': '0.6-1.2'}\n        }\n        \n        if not test_name:\n            test_name = self.random_element(list(tests.keys()))\n        \n        result = tests.get(test_name, tests['glucose'])\n        result['test_name'] = test_name\n        result['flag'] = 'Normal'\n        \n        return result\n\n\nclass LegalProvider(BaseProvider):\n    """Custom Faker provider for legal-specific data."""\n    \n    def case_number(self, year: int = None) -> str:\n        """Generate a legal case number."""\n        if not year:\n            year = datetime.now().year\n        \n        court_code = self.random_element(['CV', 'CR', 'PR', 'FL'])\n        sequential = str(self.random_int(1, 9999)).zfill(4)\n        \n        return f"{year}-{court_code}-{sequential}"\n    \n    def bar_number(self, state: str = None) -> str:\n        """Generate a bar admission number."""\n        if not state:\n            state = self.random_element(['CA', 'NY', 'TX', 'FL', 'IL'])\n        \n        digits = ''.join([str(self.random_int(0, 9)) for _ in range(6)])\n        return f"{state}{digits}"\n    \n    def patent_number(self, country: str = 'US') -> str:\n        """Generate a patent number."""\n        if country == 'US':\n            # US patent format\n            number = self.random_int(4000000, 11000000)\n            return f"US{number}"\n        else:\n            # European patent format\n            number = self.random_int(1000000, 3000000)\n            return f"EP{number}"\n    \n    def contract_clause(self) -> str:\n        """Generate a contract clause title."""\n        clauses = [\n            'Force Majeure',\n            'Indemnification',\n            'Limitation of Liability',\n            'Confidentiality',\n            'Non-Disclosure',\n            'Termination',\n            'Governing Law',\n            'Dispute Resolution',\n            'Warranty',\n            'Assignment'\n        ]\n        return self.random_element(clauses)\n    \n    def legal_entity_type(self) -> str:\n        """Generate a legal entity type."""\n        return self.random_element([\n            'Corporation',\n            'Limited Liability Company',\n            'Partnership',\n            'Sole Proprietorship',\n            'Non-Profit Organization',\n            'Trust'\n        ])\n    \n    def court_name(self) -> str:\n        """Generate a court name."""\n        level = self.random_element(['District', 'Circuit', 'Superior', 'Supreme'])\n        jurisdiction = self.random_element(['State', 'Federal'])\n        location = self.fake.city()\n        \n        return f"{jurisdiction} {level} Court of {location}"\n\n\nclass InsuranceProvider(BaseProvider):\n    """Custom Faker provider for insurance-specific data."""\n    \n    def policy_number(self, prefix: str = None) -> str:\n        """Generate an insurance policy number."""\n        if not prefix:\n            prefix = self.random_element(['POL', 'INS', 'PLY'])\n        \n        year = str(datetime.now().year)[2:]\n        sequential = ''.join([str(self.random_int(0, 9)) for _ in range(8)])\n        \n        return f"{prefix}-{year}-{sequential}"\n    \n    def claim_number(self) -> str:\n        """Generate an insurance claim number."""\n        prefix = 'CLM'\n        date_part = datetime.now().strftime('%Y%m%d')\n        sequential = str(self.random_int(1, 9999)).zfill(4)\n        \n        return f"{prefix}-{date_part}-{sequential}"\n    \n    def insurance_type(self) -> str:\n        """Generate an insurance type."""\n        return self.random_element([\n            'Auto Insurance',\n            'Homeowners Insurance',\n            'Life Insurance',\n            'Health Insurance',\n            'Disability Insurance',\n            'Business Insurance',\n            'Professional Liability'\n        ])\n    \n    def coverage_amount(self, min_amount: int = 10000, max_amount: int = 1000000) -> str:\n        """Generate a coverage amount."""\n        amount = self.random_int(min=min_amount, max=max_amount)\n        amount = round(amount / 1000) * 1000  # Round to nearest thousand\n        return f"${amount:,}"\n    \n    def deductible(self) -> str:\n        """Generate a deductible amount."""\n        amounts = [250, 500, 1000, 2500, 5000, 10000]\n        return f"${self.random_element(amounts):,}"\n    \n    def risk_score(self) -> int:\n        """Generate a risk score."""\n        return self.random_int(min=1, max=100)\n\n\nclass GovernmentProvider(BaseProvider):\n    """Custom Faker provider for government-specific data."""\n    \n    def social_security_number(self) -> str:\n        """Generate a formatted SSN (for testing only)."""\n        area = str(self.random_int(1, 899)).zfill(3)\n        group = str(self.random_int(1, 99)).zfill(2)\n        serial = str(self.random_int(1, 9999)).zfill(4)\n        \n        return f"{area}-{group}-{serial}"\n    \n    def ein(self) -> str:\n        """Generate an Employer Identification Number."""\n        prefix = str(self.random_int(1, 99)).zfill(2)\n        suffix = ''.join([str(self.random_int(0, 9)) for _ in range(7)])\n        \n        return f"{prefix}-{suffix}"\n    \n    def passport_number(self, country: str = 'US') -> str:\n        """Generate a passport number."""\n        if country == 'US':\n            # US passport: 9 digits\n            return ''.join([str(self.random_int(0, 9)) for _ in range(9)])\n        else:\n            # Generic: 2 letters + 7 digits\n            letters = ''.join(random.choices(string.ascii_uppercase, k=2))\n            digits = ''.join([str(self.random_int(0, 9)) for _ in range(7)])\n            return f"{letters}{digits}"\n    \n    def license_number(self, state: str = None) -> str:\n        """Generate a driver's license number."""\n        if not state:\n            state = self.random_element(['CA', 'NY', 'TX', 'FL', 'IL'])\n        \n        # Different formats by state\n        if state == 'CA':\n            # 1 letter + 7 digits\n            return random.choice(string.ascii_uppercase) + ''.join([str(self.random_int(0, 9)) for _ in range(7)])\n        else:\n            # Generic: 9 digits\n            return ''.join([str(self.random_int(0, 9)) for _ in range(9)])\n    \n    def tax_id(self, type: str = 'individual') -> str:\n        """Generate a tax identification number."""\n        if type == 'individual':\n            return self.social_security_number()\n        else:\n            return self.ein()\n    \n    def permit_number(self, permit_type: str = None) -> str:\n        """Generate a permit number."""\n        if not permit_type:\n            permit_type = self.random_element(['BLD', 'ZON', 'ENV', 'OCC'])\n        \n        year = str(datetime.now().year)\n        sequential = str(self.random_int(1, 9999)).zfill(4)\n        \n        return f"{permit_type}-{year}-{sequential}"\n\n\n# Register all providers\ndef register_providers(fake: Faker):\n    """Register all custom providers with a Faker instance."""\n    fake.add_provider(BankingProvider)\n    fake.add_provider(HealthcareProvider)\n    fake.add_provider(LegalProvider)\n    fake.add_provider(InsuranceProvider)\n    fake.add_provider(GovernmentProvider)\n    return fake\n\n\n# Convenience function to get a Faker instance with all providers\ndef get_enhanced_faker(locale: str = 'en_US', seed: int = None) -> Faker:\n    """Get a Faker instance with all custom providers registered."""\n    fake = Faker(locale)\n    if seed:\n        Faker.seed(seed)\n    return register_providers(fake)